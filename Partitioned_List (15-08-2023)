class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        // Create two new nodes to serve as the heads of two partitions
        ListNode node1(0), node2(0);
        
        // Create pointers p1 and p2 to keep track of the current positions in the two partitions
        ListNode *p1 = &node1, *p2 = &node2;
        
        // Traverse through the original linked list
        while (head) {
            if (head->val < x) {
                // If the current node's value is less than x, add it to partition 1
                p1 = p1->next = head;
            } else {
                // If the current node's value is greater than or equal to x, add it to partition 2
                p2 = p2->next = head;
            }
            
            // Move to the next node in the original list
            head = head->next;
        }
        
        // Terminate partition 2 (since we've reached the end of partition 1)
        p2->next = NULL;
        
        // Link the end of partition 1 to the beginning of partition 2
        p1->next = node2.next;
        
        // Return the head of the updated partitioned list
        return node1.next;
    }
};
